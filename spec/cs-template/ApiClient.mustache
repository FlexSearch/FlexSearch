using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.IO;
using System.Web;
using System.Linq;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Threading.Tasks;

namespace {{packageName}}.Client
{
    public enum FsHttpMethod
    {
        GET, PUT, POST, DELETE
    }

    /// <summary>
    /// API client is mainly responible for making the HTTP call to the API backend.
    /// </summary>
    public class ApiClient : HttpClient
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        /// <param name="basePath">The base path.</param>
        public ApiClient(String basePath = "{{basePath}}")
            : base()
        {
            if (String.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");
            
            this.BaseAddress = new Uri(basePath);
        }

        /// <summary>
        /// Initializes a new instance of the API class with HttpMessageHandler and 
        /// default configuration
        /// </summary>
        /// <param name="handler"></param>
        /// <param name="basePath"></param>
        public ApiClient(HttpMessageHandler handler, string basePath = "{{basePath}}")
            : base(handler)
        {
            if (String.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");

            this.BaseAddress = new Uri(basePath);
        }

        /// <summary>
        /// Initializes a new instance of the API class with HttpMessageHandler and 
        /// default configuration and dispose handler
        /// </summary>
        /// <param name="handler"></param>
        /// <param name="disposeHandler"></param>
        /// <param name="basePath"></param>
        public ApiClient(HttpMessageHandler handler, bool disposeHandler, string basePath = "{{basePath}}")
            : base(handler, disposeHandler)
        {
            if (String.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");

            this.BaseAddress = new Uri(basePath);
        }    

        private static string ComputeQueryString(Dictionary<string, string> queryParams)
        {
            if (!queryParams.Any()) return "";

            var parts = queryParams
                .Select(qp => string.Format("{0}={1}", HttpUtility.UrlEncode(qp.Key), HttpUtility.UrlEncode(qp.Value)));
            return "?" + string.Join("&", parts);
        }

        private static string SetPathParameters(string path, Dictionary<string,string> pathParams)
        {
            foreach (var param in pathParams)
                path = path.Replace("{" + param.Key + "}", param.Value);
            return path;
        }

        private static MediaTypeFormatter[] mediaTypeFormatters = new[] { new JsonMediaTypeFormatter() };
        
        private static HttpMethod ConvertToHttpMethod(FsHttpMethod m)
        {
            switch (m)
            {
                case FsHttpMethod.GET: return HttpMethod.Get;
                case FsHttpMethod.DELETE: return HttpMethod.Delete;
                case FsHttpMethod.POST: return HttpMethod.Post;
                case FsHttpMethod.PUT: return HttpMethod.Put;
            }

            return HttpMethod.Get;
        }

        /// <summary>
        /// Makes the HTTP request (Sync).
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <returns>Object</returns>
        public ApiResponse<U> CallApi<T,U>(
            String path, FsHttpMethod method, 
            Dictionary<String, String> queryParams, 
            T postBody,
            Dictionary<String, String> headerParams,
            Dictionary<String, String> pathParams)
        {
            return this.CallApiAsync<T, U>(path, method, queryParams, postBody, headerParams, pathParams).Result;
        }

        /// <summary>
        /// Makes the asynchronous HTTP request.
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <returns>The Task instance.</returns>
        public async Task<ApiResponse<U>> CallApiAsync<T, U>(
            string path, FsHttpMethod method, 
            Dictionary<String, String> queryParams, 
            T postBody,
            Dictionary<String, String> headerParams,
            Dictionary<String, String> pathParams)
        {
            // E.g. Replace {id} in /indices/{id}/documents with proper value
            // and add the query string
            path = SetPathParameters(path, pathParams) + ComputeQueryString(queryParams);
            HttpResponseMessage response = null;

            var httpMethod = ConvertToHttpMethod(method);

            if (httpMethod == HttpMethod.Get || httpMethod == HttpMethod.Delete)
            {
                var req = new HttpRequestMessage();
                req.Method = httpMethod;
                req.RequestUri = new Uri(path, UriKind.Relative);
                response = await this.SendAsync(req).ConfigureAwait(false);
            }
            else if (httpMethod == HttpMethod.Post)
                response = await this.PostAsync<T>(path, postBody, mediaTypeFormatters[0]).ConfigureAwait(false);
            else if (httpMethod == HttpMethod.Put)
                response = await this.PutAsync<T>(path, postBody, mediaTypeFormatters[0]).ConfigureAwait(false);

            var content = await response.Content.ReadAsAsync<U>(mediaTypeFormatters).ConfigureAwait(false);

            return new ApiResponse<U>((int)response.StatusCode,
                response.Headers.ToDictionary(x => x.Key, x => String.Join(";", x.Value)),
                content);
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <returns>Formatted string.</returns>
        public static string ParameterToString(object obj)
        {
            if (obj is DateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return ((DateTime)obj).ToString("yyyyMMddHHmmssfff");
            else if (obj is IList)
            {
                var flattenedString = new StringBuilder();
                foreach (var param in (IList)obj)
                {
                    if (flattenedString.Length > 0)
                        flattenedString.Append(",");
                    flattenedString.Append(param);
                }
                return flattenedString.ToString();
            }
            else
                return Convert.ToString(obj);
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static String SelectHeaderAccept(String[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return String.Join(",", accepts);
        }

    }
}
