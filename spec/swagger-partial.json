{
  "swagger": "2.0",
  "info": {
    "description": "Description of all the REST endpoints exposed by FlexSearch.",
    "version": "1.0.0",
    "title": "FlexSearch REST Services"
  },
  "definitions": {
    "operationMessage": {
      "description": "Represents an operational message returned from the operation. This can be used to represent both success and failure messages.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The list of key value pairs providing information about the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "description": "The actual message returned by the operation.",
          "type": "string"
        },
        "operationCode": {
          "description": "Operation Code associated with the message.",
          "type": "string"
        }
      },
      "required": [ "message", "operationCode" ]
    },
    "csvIndexingRequest": {
      "description": "Represents a request which can be sent to CSV connector to index CSV data.",
      "type": "object",
      "properties": {
        "indexName": {
          "description": "<<Index Name>>",
          "type": "string"
        },
        "hasHeaderRecord": {
          "description": "Indicates if the passed CSV file(s) has a header record",
          "type": "boolean",
          "default": false
        },
        "headers": {
          "description": "The headers to be used by each column. This should only be passed when there is\nno header in the csv file. The first column is always assumed to be id field. Make sure\nin your array you always offset the column names by 1 position.",
          "type": "array",
          "items": { "type": "string" }
        },
        "path": {
          "description": "The path of the folder or file to be indexed. The service will pick up all files with .csv extension.",
          "type": "string"
        }
      },
      "required": [ "indexName", "hasHeaderRecord", "path" ]
    },
    "sqlIndexingRequest": {
      "description": "Represents a request which can be sent to SQL connector to index SQL data",
      "type": "object",
      "properties": {
        "indexName": {
          "description": "Name of the index",
          "type": "string"
        },
        "query": {
          "description": "The query to be used to fetch data from SQL server",
          "type": "string"
        },
        "connectionString": {
          "description": "Connection string used to connect to the server",
          "type": "string"
        },
        "forceCreate": {
          "description": "Signifies if all updates to the index are create",
          "type": "boolean",
          "default": true
        },
        "createJob": {
          "description": "Signifies if the connector should create a job for the task and return a jobId which can be used to check the status of the job.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [ "indexName", "query", "connectionString" ]
    },
    "duplicateDetectionRequest": {
      "description": "Represents a request to execute dedupe against a given index and predefined query",
      "type": "object",
      "properties": {
        "selectionQuery": {
          "description": "The query that filters the records to include in the duplicate detection",
          "type": "string"
        },
        "fileName": {
          "description": "The file path of the CSV to submit for this session",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the field used to display the results",
          "type": "string"
        },
        "threadCount": {
          "description": "The number of threads on which to run the duplicate detection.",
          "type": "integer",
          "default": 1
        },
        "indexName": {
          "description": "<<Index Name>>",
          "type": "string"
        },
        "predefinedQueryName": {
          "description": "The name of the query used for duplication detection.",
          "type": "string"
        },
        "maxRecordsToScan": {
          "description": "The maximum number of records to scan for duplication detection",
          "type": "integer",
          "default": 500000
        },
        "duplicatesCount": {
          "description": "The maximum number of duplicates to include in the result",
          "type": "integer",
          "default": 500000
        }
      },
      "required": [ "displayName", "indexName", "predefinedQueryName" ]
    },
    "fieldsUpdateRequest": {
      "description": "Represents a request to update a field in an index",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The list of fields containing the new properties",
          "type": "array",
          "items": { "$ref": "#/definitions/field" }
        }
      },
      "required": [ "fields" ]
    },
    "indexStatusResponse": {
      "description": "Represents the response of an Index status request - tells whether an index is online, off-line, opening, etc.",
      "type": "object",
      "properties": {
        "indexStatus": {
          "description": "The status of an index",
          "type": "string",
          "enum": [ "Opening", "Recovering", "Online", "OnlineFollower", "Offline", "Closing", "Faulted" ],
          "default": "Opening"
        }
      }
    },
    "tokenizer": {
      "description": "<<tokenizer>>",
      "type": "object",
      "required": [ "tokenizerName" ],
      "properties": {
        "tokenizerName": {
          "description": "Name of the tokenizer",
          "type": "string"
        },
        "parameters": {
          "description": "<<parameters>>",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "filter": {
      "description": "<<filter>>",
      "type": "object",
      "required": [ "filterName" ],
      "properties": {
        "filterName": {
          "description": "Name of the filter",
          "type": "string"
        },
        "parameters": {
          "description": "<<parameters>>",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "analyzer": {
      "description": "<<analyzer>>",
      "type": "object",
      "required": [ "analyzerName", "tokenizer" ],
      "properties": {
        "analyzerName": {
          "description": "Name of the analyzer",
          "type": "string"
        },
        "tokenizer": {
          "$ref": "#/definitions/tokenizer"
        },
        "filters": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/filter"
          }
        }
      }
    },
    "shardConfiguration": {
      "description": "<<Shard Configuration>>",
      "type": "object",
      "properties": {
        "shardCount": {
          "description": "Total number of shards to be present in the given index.",
          "type": "integer",
          "format": "int32",
          "default": 1,
          "minimum": 1,
          "exclusiveMinimum": true
        }
      }
    },
    "indexConfiguration": {
      "description": "Allows to control various Index related settings.",
      "type": "object",
      "properties": {
        "commitTimeSeconds": {
          "description": "The amount of time in seconds that FlexSearch should wait before committing changes to the disk. This is only used if no commits have happened in the set time period otherwise CommitEveryNFlushes takes care of commits",
          "type": "integer",
          "format": "int32",
          "default": 60,
          "minimum": 30
        },
        "deleteLogsOnClose": {
          "description": "Determines whether to clear all transaction logs before closing an index. This setting is for advance use and should be left to default.",
          "type": "boolean",
          "default": true
        },
        "commitOnClose": {
          "description": "Determines whether to commit first before closing an index",
          "type": "boolean",
          "default": true
        },
        "autoCommit": {
          "description": "Determines whether to enable auto commit functionality or not",
          "type": "boolean",
          "default": true
        },
        "directoryType": {
          "description": "A Directory is a flat list of files. Files may be written once, when they are created. Once a file is created it may only be opened for read, or deleted. Random access is permitted both when reading and writing.",
          "type": "string",
          "enum": [ "FileSystem", "MemoryMapped", "Ram" ],
          "default": "MemoryMapped"
        },
        "defaultWriteLockTimeout": {
          "description": "The default maximum time to wait for a write lock (in milliseconds).",
          "type": "integer",
          "format": "int32",
          "default": 1000
        },
        "ramBufferSizeMb": {
          "description": "Determines the amount of RAM that may be used for buffering added documents and deletions before they are flushed to the Directory.",
          "type": "integer",
          "format": "int32",
          "default": 100,
          "minimum": 20
        },
        "maxBufferedDocs": {
          "description": "The number of buffered added documents that will trigger a flush if enabled.",
          "type": "integer",
          "format": "int32",
          "default": 3,
          "minimum": 2
        },
        "refreshTimeMilliseconds": {
          "description": "The amount of time in milliseconds that FlexSearch should wait before reopening index reader. This helps in keeping writing and real time aspects of the engine separate.",
          "type": "integer",
          "format": "int32",
          "default": 500,
          "minimum": 25
        },
        "autoRefresh": {
          "description": "Determines whether to enable auto refresh or not",
          "type": "boolean",
          "default": true
        },
        "indexVersion": {
          "description": "Corresponds to Lucene Index version. There will always be a default codec associated with each index version.",
          "type": "string",
          "enum": [ "FlexSearch_1A", "FlexSearch_1B" ],
          "default": "FlexSearch_1B"
        },
        "allowReads": {
          "description": "Signifies if the index supports reading back of indexed data.",
          "type": "boolean",
          "default": true
        },
        "allowWrites": {
          "description": "Signifies if the index supports modification of data.",
          "type": "boolean",
          "default": true
        }
      }
    },
    "field": {
      "description": "<<field>>",
      "type": "object",
      "required": [ "fieldName" ],
      "properties": {
        "allowSort": {
          "description": "Enable sorting for the field",
          "type": "boolean",
          "default": false
        },
        "fieldName": {
          "description": "Name of the field",
          "type": "string"
        },
        "fieldType": {
          "description": "Type of the field",
          "type": "string",
          "enum": [ "Int", "Double", "Float", "Keyword", "Text", "Bool", "Date", "DateTime", "Stored", "Long" ],
          "default": "Text"
        },
        "indexAnalyzer": {
          "description": "Analyzer to be used during indexing",
          "type": "string",
          "default": "standard"
        },
        "searchAnalyzer": {
          "description": "Analyzer to be used during searching",
          "type": "string",
          "default": "standard"
        },
        "similarity": {
          "description": "<<similarity>>",
          "type": "string",
          "enum": [ "BM25", "TFIDF" ],
          "default": "TFIDF"
        }
      }
    },
    "highlightOption": {
      "description": "Used for configuring the settings for text highlighting in the search results",
      "type": "object",
      "required": [ "highlightedFields" ],
      "properties": {
        "fragmentsToReturn": {
          "description": "Total number of fragments to return per document",
          "type": "integer",
          "format": "int32",
          "default": 2
        },
        "highlightedFields": {
          "description": "The fields to be used for text highlighting",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postTag": {
          "description": "Post tag to represent the ending of the highlighted word",
          "type": "string",
          "default": "</B>"
        },
        "preTag": {
          "description": "Pre tag to represent the ending of the highlighted word",
          "type": "string",
          "default": "<B>"
        }
      }
    },
    "searchQuery": {
      "description": "Search query is used for searching over a FlexSearch index. This provides a consistent syntax to execute various types of queries. The syntax is similar to the SQL syntax. This was done on purpose to reduce the learning curve.",
      "type": "object",
      "required": [ "indexName", "queryString" ],
      "properties": {
        "queryName": {
          "description": "Unique name of the query. This is only required if you are setting up a predefined query.",
          "type": "string",
          "default": ""
        },
        "columns": {
          "description": "Columns to be returned as part of results. \n + *  - return all columns \n + [] - return no columns \n + [columnName] -  return specific column",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "count": {
          "description": "Count of results to be returned",
          "type": "integer",
          "format": "int32",
          "default": 10
        },
        "highlights": {
          "$ref": "#/definitions/highlightOption"
        },
        "indexName": {
          "description": "Name of the index",
          "type": "string"
        },
        "orderBy": {
          "description": "Can be used to order the results by score or specific field",
          "type": "string",
          "default": "score"
        },
        "orderByDirection": {
          "description": "Can be used to determine the sort order.",
          "type": "string",
          "enum": [ "Ascending", "Descending" ],
          "default": "Ascending"
        },
        "cutOff": {
          "description": "Can be used to remove results lower than a certain threshold. This works in conjunction with the score of the top record as all the other records are filtered using the score set by the top scoring record.",
          "type": "number",
          "format": "double"
        },
        "distinctBy": {
          "description": "Can be used to return records with distinct values for the given field. Works in a manner similar to Sql distinct by clause.",
          "type": "string",
          "default": ""
        },
        "skip": {
          "description": "Used to enable paging and skip certain pre-fetched results.",
          "type": "integer",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "queryString": {
          "description": "Query string to be used for searching",
          "type": "string"
        },
        "returnScore": {
          "description": " If true then scores are returned as a part of search result.",
          "type": "boolean",
          "default": true
        },
        "preSearchScript": {
          "description": "Script that is executed before submitting the search to Lucene. It can be used to modify the incoming Variables",
          "type": "string",
          "default": ""
        },
        "overridePredefinedQueryOptions": {
          "description": "Can be used to override the configuration saved in the predefined query with the one which is passed as the Search Query",
          "type": "boolean",
          "default": false
        },
        "returnEmptyStringForNull": {
          "description": "Returns an empty string for null values saved in the index rather than the null constant",
          "type": "boolean",
          "default": true
        },
        "variables": {
          "description": "The mapping between the variable names (the ones prefixed by '@') given in the query string and their actual values",
          "type": "object",
          "additionalProperties": { "type": "string" }
        }
      }
    },
    "document": {
      "description": "<<document>>",
      "type": "object",
      "required": [ "indexName", "id" ],
      "properties": {
        "fields": {
          "description": "<<fields>>",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "The unique id of the document",
          "type": "string",
          "minLength": 0
        },
        "indexName": {
          "description": "<<Index Name>>",
          "type": "string"
        },
        "timeStamp": {
          "description": "Represents the time at which the document was last indexed.",
          "type": "integer",
          "format": "int64"
        },
        "modifyIndex": {
          "description": "<<ModifyIndex>>",
          "type": "integer",
          "format": "int64"
        },
        "highlights": {
          "description": "Returns any highlighted segments of the document. This will only be returned as a part of Search result.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "score": {
          "description": "The score associated with the document. This will only be used when documents are returned from a Search Query.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "index": {
      "description": "<<index>>",
      "type": "object",
      "required": [ "indexName" ],
      "properties": {
        "indexName": {
          "description": "<<Index Name>>",
          "type": "string",
          "minLength": 1
        },
        "fields": {
          "description": "<<fields>>",
          "type": "array",
          "items": {
            "$ref": "#/definitions/field"
          }
        },
        "predefinedQueries": {
          "description": "Array of Predefined Queries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/searchQuery"
          }
        },
        "shardConfiguration": {
          "description": "<<Shard Configuration>>",
          "$ref": "#/definitions/shardConfiguration"
        },
        "indexConfiguration": {
          "description": "<<Index Configuration>>",
          "$ref": "#/definitions/indexConfiguration"
        },
        "active": {
          "description": "Represents if an Index is active or not?",
          "type": "boolean",
          "default": true
        }
      }
    },
    "searchResults": {
      "description": "Represents the output of a Search Query",
      "type": "object",
      "properties": {
        "documents": {
          "description": "Array of Documents",
          "type": "array",
          "items": {
            "$ref": "#/definitions/document"
          }
        },
        "recordsReturned": {
          "description": "Total number of records returned as part of the Search Query",
          "type": "integer",
          "format": "int32"
        },
        "bestScore": {
          "description": "The highest score returned by any document as part of the search result.",
          "type": "number",
          "format": "float"
        },
        "totalAvailable": {
          "description": "The total number of documents available as part of the search query. Note the actual records returned could be lower than the total available in the index.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "job": {
      "description": "Represents a job which can be scheduled or executed on the server",
      "type": "object",
      "properties": {
        "jobId": {
          "description": "The unique ID associated with the Job",
          "type": "string"
        },
        "totalItems": {
          "description": "The total number of items to be processed as part of the job.",
          "type": "integer",
          "format": "int32"
        },
        "processedItems": {
          "description": "The total number of items processed so far.",
          "type": "integer",
          "format": "int32"
        },
        "failedItems": {
          "description": "The total number of items which have failed.",
          "type": "integer",
          "format": "int32"
        },
        "jobStatus": {
          "description": "The current status of the job.",
          "type": "string",
          "enum": [ "Initializing", "Initialized", "InProgress", "Completed", "CompletedWithErrors" ]
        },
        "message": {
          "description": "Any operation message associated with the  job.",
          "type": "string"
        }
      }
    },
    "creationId": {
      "description": "",
      "type": "object",
      "required": [ "id" ],
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        }
      }
    },
    "indexExists": {
      "description": "Signifies if an index exists on the server or not?",
      "type": "object",
      "properties": {
        "exists": {
          "description": "Status signifying if the index exists.",
          "type": "boolean"
        }
      }
    },
    "memoryDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "usedMemory": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "totalMemory": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "usage": {
          "description": "",
          "type": "number",
          "format": "double"
        }
      }
    },
    "noBody": {
      "description": "",
      "type": "object"
    },
    "getAllAnalyzersResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": { "$ref": "#/definitions/analyzer" }
        },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getAnalyzerResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/analyzer" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "createOrUpdateAnalyzerResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "deleteAnalyzerResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "analyzeText": {
      "description": "A request object which can be used to analyze a text input using an analyzer.",
      "type": "object",
      "required": [ "text", "analyzerName" ],
      "properties": {
        "text": {
          "description": "The text to be analyzed by the analyzer.",
          "type": "string"
        },
        "analyzerName": {
          "description": "The name of the analyzer.",
          "type": "string"
        }
      }
    },
    "analyzeTextResponse": {
      "properties": {
        "data": {
          "type": "array",
          "items": { "type": "string" }
        },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getDocumentResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/document" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "createOrUpdateDocumentResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "deleteDocumentResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "deleteDocumentsBySearchResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/searchResults" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getDocumentsResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/searchResults" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "createDocumentResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/creationId" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "deleteAllDocumentsResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "searchResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/searchResults" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getIndexResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/index" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "deleteIndexResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getAllIndicesResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": { "$ref": "#/definitions/index" }
        },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "createIndexResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "indexExistsResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/indexExists" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getIndexSizeResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "number" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "refreshIndexResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getStatusResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/indexStatusResponse" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "updateIndexStatusResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "updateIndexConfigurationResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "updateIndexFieldsResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "updateIndexPredefinedQueryResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getJobResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/job" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "getServerMemoryDetailsResponse": {
      "type": "object",
      "properties": {
        "data": { "$ref": "#/definitions/memoryDetails" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "pingResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "setupDemoResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "boolean" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "duplicateDetectionResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "string" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "csvIndexingResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "string" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "sqlIndexingResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "string" },
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    }
  },
  "host": "localhost:9800",
  "schemes": [ "http" ],
  "paths": {
    "/analyzers": {
      "get": {
        "tags": [ "analyzer" ],
        "summary": "Get all analyzers",
        "description": "Returns all the analyzers present in the system.",
        "operationId": "getAllAnalyzers",
        "responses": {
          "200": {
            "description": "An array of analyzers",
            "schema": { "$ref": "#/definitions/getAllAnalyzersResponse" }
          },
          "400": {
            "description": "Unexpected error",
            "schema": { "$ref": "#/definitions/getAllAnalyzersResponse" }
          }
        }
      }
    },
    "/analyzers/{analyzerName}": {
      "get": {
        "tags": [ "analyzer" ],
        "summary": "Get analyzer",
        "description": "Returns an analyzer by name.",
        "operationId": "getAnalyzer",
        "parameters": [
          {
            "name": "analyzerName",
            "in": "path",
            "description": "Analyzer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/getAnalyzerResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/getAnalyzerResponse" }
          }
        }
      },
      "put": {
        "tags": [ "analyzer" ],
        "summary": "Create or update an analyzer",
        "description": "This service is idempotent.",
        "operationId": "createOrUpdateAnalyzer",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/analyzer" },
            "name": "Analyzer",
            "required": true
          },
          {
            "name": "analyzerName",
            "in": "path",
            "description": "Analyzer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/createOrUpdateAnalyzerResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/createOrUpdateAnalyzerResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "analyzer" ],
        "summary": "Delete an analyzer",
        "description": "Deletes an analyzer by name.",
        "operationId": "deleteAnalyzer",
        "parameters": [
          {
            "name": "analyzerName",
            "in": "path",
            "description": "Analyzer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/deleteAnalyzerResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/deleteAnalyzerResponse" }
          }
        }
      }
    },
    "/analyzers/{analyzerName}/analyzetext": {
      "post": {
        "tags": [ "analyzer" ],
        "summary": "Analyze input text",
        "description": "This endpoint is useful to understand the effect of a particular analyzer on the input text. You can use the service with both custom and built-in analyzers. The returned response contains the tOKenized input.",
        "operationId": "analyzeText",
        "parameters": [
          {
            "in": "body",
            "description": "Text to analyze",
            "schema": { "$ref": "#/definitions/analyzeText" },
            "name": "AnalyzeText",
            "required": true
          },
          {
            "name": "analyzerName",
            "in": "path",
            "description": "Analyzer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/analyzeTextResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/analyzeTextResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/documents": {
      "get": {
        "tags": [ "documents" ],
        "summary": "Returns top 10 document from the index",
        "description": "This endpoint is useful to determine the structure of the documents indexed. At times it is quicker to get the count of all the documents present in the index\nusing the service rather then using the search API.\n",
        "operationId": "getDocuments",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/getDocumentsResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/getDocumentsResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/getDocumentsResponse" }
          }
        }
      },
      "post": {
        "tags": [ "documents", "common" ],
        "summary": "Create a document",
        "description": "Creates a new document. Unlike a database system FlexSearch doesn't impose the requirement of a unique\nID per document. You can add multiple documents by the same ID but this can\nimpose a problem while adding or retrieving them. You can enforce a unique ID\ncheck by using the `timestamp` field. To understand more about ID check and\nconcurrency control, please refer to the article `concurrency control` under\nconcepts section.\n",
        "operationId": "createDocument",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/document" },
            "name": "Document",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/createDocumentResponse" }
          },
          "409": {
            "description": "Conflict",
            "schema": { "$ref": "#/definitions/createDocumentResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/createDocumentResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "documents", "common" ],
        "summary": "Delete all documents",
        "description": "This will remove all the documents present in an index. This is useful when you want to re-index all the documents.",
        "operationId": "deleteAllDocuments",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/deleteAllDocumentsResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/deleteAllDocumentsResponse" }
          }
        }
      }
    },
    "/indices/{indexId}/documents/{docId}": {
      "get": {
        "tags": [ "documents", "common" ],
        "summary": "Returns document by ID",
        "description": "",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "indexId",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "docId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/getDocumentResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/getDocumentResponse" }
          }
        }
      },
      "put": {
        "tags": [ "documents", "common" ],
        "summary": "Create or update a document",
        "description": "It is advisable to use create document endpoint when you are sure that the document does not exist in an index. This service will always perform an ID based loOK up to determine if a document already exists. In case of non-unique\nID based index, this will replace all the documents with the currently passed document. This endpoint can be used with concurrency control semantics.",
        "operationId": "createOrUpdateDocument",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/document" },
            "name": "Document",
            "required": true
          },
          {
            "name": "indexId",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "docId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/createOrUpdateDocumentResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/createOrUpdateDocumentResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "documents" ],
        "summary": "Delete a document",
        "description": "In case of non-unique ID field, this will delete all the documents associated with that ID.",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "name": "indexId",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "docId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/deleteDocumentResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/deleteDocumentResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/search": {
      "get": {
        "tags": [ "search" ],
        "summary": "Search in a index",
        "description": "Search across the index for documents. Any parameter passed as part of query string takes precedence over the same parameter in the request body. This operation supports both GET & POST verbs.",
        "operationId": "getSearch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Short hand for 'QueryString'.",
            "type": "string"
          },
          {
            "name": "c",
            "in": "query",
            "description": "Columns to be retrieved. Use * to retrieve all columns.",
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Order by parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "orderbydirection",
            "in": "query",
            "description": "Order by Direction parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/searchQuery" },
            "name": "SearchQuery",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/searchResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/searchResponse" }
          }
        }
      },
      "post": {
        "tags": [ "search", "common" ],
        "summary": "Search in a index",
        "description": "Search across the index for documents. Any parameter passed as part of query string takes precedence over the same parameter in the request body. This operation supports both GET & POST verbs.",
        "operationId": "search",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Short hand for 'QueryString'.",
            "type": "string"
          },
          {
            "name": "c",
            "in": "query",
            "description": "Columns to be retrieved. Use * to retrieve all columns.",
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Order by parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "orderbydirection",
            "in": "query",
            "description": "Order by Direction parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/searchQuery" },
            "name": "SearchQuery",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/searchResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/searchResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "documents", "search" ],
        "summary": "Delete all documents returned by search query",
        "description": "Deletes all the documents returned by the given search query, then executes a Commit. Returns the documents found by the search query.",
        "operationId": "deleteDocumentsBySearch",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Short hand for 'QueryString'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Order by parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "orderbydirection",
            "in": "query",
            "description": "Order by Direction parameter. Refer to 'Search Query' properties.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/deleteDocumentsBySearchResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/deleteDocumentsBySearchResponse" }
          }
        }
      }
    },
    "/indices/{indexName}": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Get an index",
        "description": "This service will return a status of 404 when index is not present on the server.",
        "operationId": "getIndex",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/getIndexResponse" }
          },
          "404": {
            "description": "Not Found",
            "schema": { "$ref": "#/definitions/getIndexResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/getIndexResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "indices", "common" ],
        "summary": "Deletes an index",
        "description": "Index deletion happens in two parts, first the index configuration file is deleted from the configurations folder, then the index is deleted from the data folder. In case any error is encountered the cleanup will be performed on the server restart.",
        "operationId": "deleteIndex",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/deleteIndexResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/deleteIndexResponse" }
          }
        }
      }
    },
    "/indices": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Get all indices",
        "description": "",
        "operationId": "getAllIndices",
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/getAllIndicesResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/getAllIndicesResponse" }
          }
        }
      },
      "post": {
        "tags": [ "common", "indices" ],
        "summary": "Create a new index",
        "description": "",
        "operationId": "createIndex",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/index" },
            "name": "Index",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/createIndexResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/createIndexResponse" }
          },
          "409": {
            "description": "Conflict",
            "schema": { "$ref": "#/definitions/createIndexResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/exists": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Check if an index exists",
        "description": "This endpoint can be used to check if an index is present in the system. This endpoint is a lighter alternative to accessing the index by an ID as the response is smaller in size.",
        "operationId": "indexExists",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/indexExistsResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/indexExistsResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/size": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Returns the size of an index",
        "description": "The return size may be higher than the actual size of the documents present in the index. The return value includes the space occupied by the transaction logs and older segment files which are not cleaned up as part of the last comment.",
        "operationId": "getIndexSize",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/getIndexSizeResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/getIndexSizeResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/refresh": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Refreshes an index",
        "description": "Refreshes an index so that committed data can be visible when searching.",
        "operationId": "refreshIndex",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/refreshIndexResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/refreshIndexResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/status": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Returns the status of an index",
        "description": "This endpoint can be used to determine if an index is online or off-line.",
        "operationId": "getIndexStatus",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/getStatusResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/getStatusResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/status/{status}": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Update the status of an index",
        "description": "This endpoint can be used to set an index online or off-line.",
        "operationId": "updateIndexStatus",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "path",
            "description": "offline / online",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/updateIndexStatusResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/updateIndexStatusResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/configuration": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Update the configuration of an index",
        "description": "The Index Version cannot be modified.",
        "operationId": "updateIndexConfiguration",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/indexConfiguration" },
            "name": "IndexConfiguration",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/updateIndexConfigurationResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/updateIndexConfigurationResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/fields": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Update the Index Fields",
        "description": "Any analyzer which is to be used as part of an index field should be defined before adding the field to the index. Always re-index the data after a field update, otherwise you may get unexpected results. New fields added as part of fields update will not have any data available for the older records, in such cases if the indexing is not done the engine will use default values for the field type. If an existing field is removed then the data associated with that field will not be accessible even though the data will not be removed from the index itself.",
        "operationId": "updateIndexFields",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/fieldsUpdateRequest" },
            "name": "FieldsUpdateRequest",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/updateIndexFieldsResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/updateIndexFieldsResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/predefinedQuery": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Adds or updates a predefined query for the given index",
        "description": "",
        "operationId": "updateIndexPredefinedQuery",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/searchQuery" },
            "name": "SearchQuery",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/updateIndexPredefinedQueryResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/updateIndexPredefinedQueryResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/duplicatedetection/{predefinedQueryName}": {
      "post": {
        "tags": [ "common" ],
        "summary": "Duplicate Detection Handler\n",
        "description": "",
        "operationId": "duplicateDetection",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/duplicateDetectionRequest" },
            "name": "DuplicateDetectionRequest",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "predefinedQueryName",
            "in": "path",
            "description": "Predefined query name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Job ID",
            "schema": { "$ref": "#/definitions/duplicateDetectionResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/duplicateDetectionResponse" }
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": [ "jobs" ],
        "summary": "Returns job information",
        "description": "",
        "operationId": "getJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Job",
            "schema": { "$ref": "#/definitions/getJobResponse" }
          }
        }
      }
    },
    "/memory": {
      "get": {
        "tags": [ "server" ],
        "summary": "Returns memory used by the server",
        "description": "",
        "operationId": "getServerMemoryDetails",
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/getServerMemoryDetailsResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/getServerMemoryDetailsResponse" }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [ "server" ],
        "summary": "Ping server",
        "description": "A simple endpoint which can be used to check the server is running. This is useful for checking the status of the server from a load balancer or fire-wall.",
        "operationId": "ping",
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/pingResponse" }
          }
        }
      }
    },
    "/setupdemo": {
      "put": {
        "tags": [ "server" ],
        "summary": "Setup a demo index",
        "description": "This endpoint if useful for setting up a demo index which can be used to explore\nthe capabilities of FlexSearch. This is an in memory index which gets wiped out\non server restart.\n",
        "operationId": "setupDemo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/setupDemoResponse" }
          },
          "400": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/setupDemoResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/csv": {
      "post": {
        "tags": [ "common" ],
        "summary": "Connector for importing CSV file data into the system.\n",
        "description": "",
        "operationId": "csv",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/csvIndexingRequest" },
            "name": "CsvIndexingRequest",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/csvIndexingResponse" }
          },
          "400": {
            "description": "Failure",
            "schema": { "$ref": "#/definitions/csvIndexingResponse" }
          }
        }
      }
    },
    "/indices/{indexName}/sql": {
      "post": {
        "tags": [ "common" ],
        "summary": "Connector for importing data from Microsoft SQL into the system.\n",
        "description": "",
        "operationId": "sql",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/sqlIndexingRequest" },
            "name": "SqlIndexingRequest",
            "description": "The SQL request",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/sqlIndexingResponse" }
          },
          "400": {
            "description": "Failure",
            "schema": { "$ref": "#/definitions/sqlIndexingResponse" }
          }
        }
      }
    }
  },
  "tags": [
    { "name": "All" },
    { "name": "analyzer" },
    { "name": "common" },
    { "name": "documents" },
    { "name": "search" },
    { "name": "indices" },
    { "name": "server" },
    { "name": "jobs" }
  ]
}
